{
  "__inputs": [
    {
      "name": "DS_INFLUXDBJMETER-OLD",
      "label": "InfluxDBjmeter-old",
      "description": "",
      "type": "datasource",
      "pluginId": "influxdb",
      "pluginName": "InfluxDB"
    }
  ],
  "__elements": {},
  "__requires": [
    {
      "type": "grafana",
      "id": "grafana",
      "name": "Grafana",
      "version": "10.0.2"
    },
    {
      "type": "datasource",
      "id": "influxdb",
      "name": "InfluxDB",
      "version": "1.0.0"
    },
    {
      "type": "panel",
      "id": "table",
      "name": "Table",
      "version": ""
    },
    {
      "type": "panel",
      "id": "timeseries",
      "name": "Time series",
      "version": ""
    }
  ],
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "description": "This dashboard shows live load test metrics provided by JMeter, updated bars charts.",
  "editable": true,
  "fiscalYearStartMonth": 0,
  "gnetId": 13644,
  "graphTooltip": 1,
  "id": null,
  "links": [
    {
      "asDropdown": false,
      "icon": "external link",
      "includeVars": false,
      "keepTime": false,
      "tags": [
        "perf",
        "tests logs"
      ],
      "targetBlank": false,
      "title": "Tests logs",
      "tooltip": "",
      "type": "dashboards",
      "url": ""
    }
  ],
  "liveNow": false,
  "panels": [
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 133,
      "panels": [],
      "title": "Main",
      "type": "row"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDBJMETER-OLD}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "center",
            "cellOptions": {
              "type": "auto"
            },
            "filterable": false,
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": []
          },
          "unit": "none"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Metric"
            },
            "properties": [
              {
                "id": "custom.align",
                "value": "left"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Metric"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 260
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 5,
        "w": 8,
        "x": 0,
        "y": 1
      },
      "id": 125,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "frameIndex": 1,
        "showHeader": true,
        "sortBy": [
          {
            "desc": false,
            "displayName": "Metric"
          }
        ]
      },
      "pluginVersion": "10.0.2",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDBJMETER-OLD}"
          },
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "orderByTime": "ASC",
          "policy": "default",
          "query": "data_baseline = from(bucket: v.bucket)\r\n  |> range(start: 0, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"requestsRaw\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"responseTime\")\r\n  |> filter(fn: (r) => r[\"runId\"] == \"${baseline_runId}\")\r\n  |> filter(fn: (r) => r[\"sampleType\"] == \"${sampleType}\")\r\n  |> filter(fn: (r) => r[\"status\"] == \"0\")\r\n  |> keep(columns: [\"_time\", \"_value\", \"_field\", \"sampleType\", \"status\"])\r\n  |> group(columns: [\"_field\"])\r\n\r\ndata_current = from(bucket: v.bucket)\r\n  |> range(start: 0, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"requestsRaw\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"responseTime\")\r\n  |> filter(fn: (r) => r[\"runId\"] == \"${current_runId}\")\r\n  |> filter(fn: (r) => r[\"sampleType\"] == \"${sampleType}\")\r\n  |> filter(fn: (r) => r[\"status\"] == \"0\")\r\n  |> keep(columns: [\"_time\", \"_value\", \"_field\", \"sampleType\", \"status\"])\r\n  |> group(columns: [\"_field\"])\r\n\r\ntps_baseline = data_baseline\r\n\r\n  |> aggregateWindow(every: 1s, fn: count, createEmpty: false)    \r\n  |> median()\r\n  |> map(fn: (r) => ({ _value: r._value, Metric:\"1. Median ${sampleType}s per second\" }))\r\n  |> rename(columns: {_value: \"Value\"})\r\n  \r\ntps_current = data_current\r\n\r\n  |> aggregateWindow(every: 1s, fn: count, createEmpty: false)   \r\n  |> median()\r\n  |> map(fn: (r) => ({ _value: r._value, Metric:\"1. Median ${sampleType}s per second\" }))\r\n  |> rename(columns: {_value: \"Value\"})\r\n\r\ntps = join(tables: {d1: tps_baseline, d2: tps_current}, on: [\"Metric\"])\r\n  |> rename(columns: {\"Value_d1\": \"Baseline\"})\r\n  |> rename(columns: {\"Value_d2\": \"Current\"})\r\n\r\ntotal_t_baseline = data_baseline\r\n\r\n  |> count()\r\n  |> toFloat()\r\n  |> map(fn: (r) => ({ _value: r._value, Metric:\"3. Total ${sampleType}s served\" }))\r\n  |> rename(columns: {_value: \"Value\"})\r\n\r\ntotal_t_current = data_current\r\n\r\n  |> count()\r\n  |> toFloat()\r\n  |> map(fn: (r) => ({ _value: r._value, Metric:\"3. Total ${sampleType}s served\" }))\r\n  |> rename(columns: {_value: \"Value\"})\r\n\r\ntotal_t = join(tables: {d1: total_t_baseline, d2: total_t_current}, on: [\"Metric\"]) \r\n  |> rename(columns: {\"Value_d1\": \"Baseline\"})\r\n  |> rename(columns: {\"Value_d2\": \"Current\"})\r\n\r\nunion(tables: [tps, total_t])",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              }
            ]
          ],
          "tags": []
        }
      ],
      "title": "Total stats",
      "type": "table"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDBJMETER-OLD}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "opacity",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "decimals": 0,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "short"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Requests Per Second v0.3.118@20220602-1219"
            },
            "properties": [
              {
                "id": "custom.lineStyle",
                "value": {
                  "dash": [
                    10,
                    10
                  ],
                  "fill": "dash"
                }
              },
              {
                "id": "displayName",
                "value": "${__field.labels.runId}"
              },
              {
                "id": "custom.gradientMode",
                "value": "opacity"
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Requests Per Second v0.3.119@20220615-1544"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "${__field.labels.runId}"
              },
              {
                "id": "color",
                "value": {
                  "mode": "palette-classic"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "maxActiveThreads"
            },
            "properties": [
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-blue",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 10,
        "w": 16,
        "x": 8,
        "y": 1
      },
      "id": 129,
      "options": {
        "legend": {
          "calcs": [
            "mean"
          ],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDBJMETER-OLD}"
          },
          "hide": false,
          "query": " from(bucket: v.bucket)\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"virtualUsers\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"maxActiveThreads\")\r\n  |> filter(fn: (r) => r[\"runId\"] == \"${current_runId}\")\r\n  |> aggregateWindow(every: ${aggregation}s, fn: max, createEmpty: false)\r\n  |> keep(columns: [\"_time\", \"_value\", \"_field\"])\r\n  |> sort(columns: [\"_time\"], desc: false)",
          "refId": "B"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDBJMETER-OLD}"
          },
          "query": "current_data = from(bucket: v.bucket)\r\n  |> range(start: 0, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"requestsRaw\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"responseTime\")\r\n  |> filter(fn: (r) => r[\"sampleType\"] == \"${sampleType}\")\r\n  |> filter(fn: (r) => r[\"runId\"] == \"${current_runId}\")\r\n  |> set(key: \"runId\",value: \"${current_runId}\")\r\n\r\ncurrent_endTime = current_data \r\n  |> keep(columns: [\"_time\", \"runId\"])\r\n  |> max(column: \"_time\")\r\n  |> findColumn(fn: (key) => key.runId == \"${current_runId}\", column: \"_time\")\r\n\r\ncurrent_startTime = current_data \r\n  |> keep(columns: [\"_time\", \"runId\"])\r\n  |> min(column: \"_time\")\r\n  |> findColumn(fn: (key) => key.runId == \"${current_runId}\", column: \"_time\")\r\n\r\ncurrent_data_tr = current_data\r\n  |> range(start: time(v: current_startTime[0]), stop: time(v: current_endTime[0]))\r\n  |> keep(columns: [\"_time\", \"_value\", \"_field\", \"runId\"])\r\n  |> aggregateWindow(every: ${aggregation}s, fn: count, createEmpty: false)   \r\n  |> toFloat() \r\n  |> map(fn: (r) => ({ r with _value: float(v: r._value /float(v: 60)), _field:\"\" }))\r\n\r\nbaseline_data = from(bucket: v.bucket)\r\n  |> range(start: 0, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"requestsRaw\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"responseTime\")\r\n  |> filter(fn: (r) => r[\"sampleType\"] == \"${sampleType}\")\r\n  |> filter(fn: (r) => r[\"runId\"] == \"${baseline_runId}\")\r\n  |> set(key: \"runId\",value: \"${baseline_runId}\")\r\n\r\n\r\nbaseline_endTime = baseline_data \r\n  |> keep(columns: [\"_time\", \"runId\"])\r\n  |> max(column: \"_time\")\r\n  |> findColumn(fn: (key) => key.runId == \"${baseline_runId}\", column: \"_time\")\r\n\r\nbaseline_startTime = baseline_data \r\n  |> keep(columns: [\"_time\", \"runId\"])\r\n  |> min(column: \"_time\")\r\n  |> findColumn(fn: (key) => key.runId == \"${baseline_runId}\", column: \"_time\")\r\n\r\nbaseline_data_tr = baseline_data\r\n  |> range(start: time(v: baseline_startTime[0]), stop: time(v: baseline_endTime[0]))\r\n  |> keep(columns: [\"_time\", \"_value\", \"_field\", \"runId\"])\r\n  |> aggregateWindow(every: ${aggregation}s, fn: count, createEmpty: false)   \r\n  |> toFloat() \r\n  |> map(fn: (r) => ({ r with _value: float(v: r._value /float(v: 60)), _field:\"\" }))\r\n  |> timeShift(duration: duration(v: uint(v: current_startTime[0])-uint(v: baseline_startTime[0])))\r\n\r\nunion(tables: [current_data_tr, baseline_data_tr])",
          "refId": "A"
        }
      ],
      "title": "${sampleType}s per second",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDBJMETER-OLD}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "center",
            "cellOptions": {
              "type": "auto"
            },
            "filterable": false,
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": []
          },
          "unit": "ms"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Metric"
            },
            "properties": [
              {
                "id": "custom.align",
                "value": "left"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Metric"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 250
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 5,
        "w": 8,
        "x": 0,
        "y": 6
      },
      "id": 114,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "frameIndex": 1,
        "showHeader": true,
        "sortBy": [
          {
            "desc": false,
            "displayName": "Metric"
          }
        ]
      },
      "pluginVersion": "10.0.2",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDBJMETER-OLD}"
          },
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "orderByTime": "ASC",
          "policy": "default",
          "query": "data_baseline = from(bucket: v.bucket)\r\n  |> range(start: 0, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"requestsRaw\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"responseTime\")\r\n  |> filter(fn: (r) => r[\"runId\"] == \"${baseline_runId}\")\r\n  |> filter(fn: (r) => r[\"sampleType\"] == \"${sampleType}\")\r\n  |> filter(fn: (r) => r[\"status\"] == \"0\")\r\n  |> keep(columns: [\"_time\", \"_value\", \"_field\", \"sampleType\", \"status\"])\r\n  |> group(columns: [\"_field\"])\r\n  |> toFloat()\r\n\r\ndata_current = from(bucket: v.bucket)\r\n  |> range(start: 0, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"requestsRaw\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"responseTime\")\r\n  |> filter(fn: (r) => r[\"runId\"] == \"${current_runId}\")\r\n  |> filter(fn: (r) => r[\"sampleType\"] == \"${sampleType}\")\r\n  |> filter(fn: (r) => r[\"status\"] == \"0\")\r\n  |> keep(columns: [\"_time\", \"_value\", \"_field\", \"sampleType\", \"status\"])\r\n  |> group(columns: [\"_field\"])\r\n  |> toFloat()\r\n\r\npct90_rt_baseline = data_baseline\r\n\r\n  |> quantile(q: 0.90)\r\n  |> map(fn: (r) => ({ _value: r._value, Metric:\"1. 90%-tile ${sampleType} response time\" }))\r\n  |> rename(columns: {_value: \"Value\"})\r\n  \r\npct90_rt_current = data_current\r\n\r\n  |> quantile(q: 0.90)\r\n  |> map(fn: (r) => ({ _value: r._value, Metric:\"1. 90%-tile ${sampleType} response time\" }))\r\n  |> rename(columns: {_value: \"Value\"})\r\n\r\npct90_rt = join(tables: {d1: pct90_rt_baseline, d2: pct90_rt_current}, on: [\"Metric\"])\r\n  |> rename(columns: {\"Value_d1\": \"Baseline\"})\r\n  |> rename(columns: {\"Value_d2\": \"Current\"})\r\n  \r\nmedian_rt_baseline = data_baseline\r\n\r\n  |> median()\r\n  |> map(fn: (r) => ({ _value: r._value, Metric:\"2. Median ${sampleType} response time\" }))\r\n  |> rename(columns: {_value: \"Value\"})\r\n  \r\nmedian_rt_current = data_current\r\n\r\n  |> median()\r\n  |> map(fn: (r) => ({ _value: r._value, Metric:\"2. Median ${sampleType} response time\" }))\r\n  |> rename(columns: {_value: \"Value\"})\r\n\r\nmedian_rt = join(tables: {d1: median_rt_baseline, d2: median_rt_current}, on: [\"Metric\"])\r\n  |> rename(columns: {\"Value_d1\": \"Baseline\"})\r\n  |> rename(columns: {\"Value_d2\": \"Current\"})\r\n\r\nunion(tables: [pct90_rt, median_rt])",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              }
            ]
          ],
          "tags": []
        }
      ],
      "title": "Response time stats ${sampleType}s",
      "type": "table"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDBJMETER-OLD}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "ms"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "responseTime Baseline test"
            },
            "properties": [
              {
                "id": "custom.lineStyle",
                "value": {
                  "dash": [
                    10,
                    10
                  ],
                  "fill": "dash"
                }
              },
              {
                "id": "displayName",
                "value": "${__field.labels.runId}"
              },
              {
                "id": "custom.gradientMode",
                "value": "opacity"
              },
              {
                "id": "color",
                "value": {
                  "mode": "continuous-BlPu"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "responseTime Current test"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "${__field.labels.runId}"
              },
              {
                "id": "color",
                "value": {
                  "mode": "continuous-GrYlRd"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 10,
        "w": 12,
        "x": 0,
        "y": 11
      },
      "id": 130,
      "options": {
        "legend": {
          "calcs": [
            "mean"
          ],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDBJMETER-OLD}"
          },
          "query": "current_data = from(bucket: v.bucket)\r\n  |> range(start: 0, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"requestsRaw\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"responseTime\")\r\n  |> filter(fn: (r) => r[\"sampleType\"] == \"${sampleType}\")\r\n  |> filter(fn: (r) => r[\"runId\"] == \"${current_runId}\")\r\n  |> set(key: \"runId\",value: \"Current test\")\r\n\r\ncurrent_endTime = current_data \r\n  |> keep(columns: [\"_time\", \"runId\"])\r\n  |> max(column: \"_time\")\r\n  |> findColumn(fn: (key) => key.runId == \"Current test\", column: \"_time\")\r\n\r\ncurrent_startTime = current_data \r\n  |> keep(columns: [\"_time\", \"runId\"])\r\n  |> min(column: \"_time\")\r\n  |> findColumn(fn: (key) => key.runId == \"Current test\", column: \"_time\")\r\n\r\ncurrent_data_rt = current_data\r\n  |> range(start: time(v: current_startTime[0]), stop: time(v: current_endTime[0]))\r\n  |> keep(columns: [\"_time\", \"_value\", \"_field\", \"runId\"])\r\n  |> toFloat()\r\n  |> aggregateWindow(every: ${aggregation}s, fn: median, createEmpty: false)\r\n\r\nbaseline_data = from(bucket: v.bucket)\r\n  |> range(start: 0, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"requestsRaw\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"responseTime\")\r\n  |> filter(fn: (r) => r[\"sampleType\"] == \"${sampleType}\")\r\n  |> filter(fn: (r) => r[\"runId\"] == \"${baseline_runId}\")\r\n  |> set(key: \"runId\",value: \"Baseline test\")\r\n\r\nbaseline_endTime = baseline_data \r\n  |> keep(columns: [\"_time\", \"runId\"])\r\n  |> max(column: \"_time\")\r\n  |> findColumn(fn: (key) => key.runId == \"Baseline test\", column: \"_time\")\r\n\r\nbaseline_startTime = baseline_data \r\n  |> keep(columns: [\"_time\", \"runId\"])\r\n  |> min(column: \"_time\")\r\n  |> findColumn(fn: (key) => key.runId == \"Baseline test\", column: \"_time\")\r\n\r\nbaseline_data_rt = baseline_data\r\n  |> range(start: time(v: baseline_startTime[0]), stop: time(v: baseline_endTime[0]))\r\n  |> keep(columns: [\"_time\", \"_value\", \"_field\", \"runId\"])\r\n  |> toFloat()\r\n  |> aggregateWindow(every: ${aggregation}s, fn: median, createEmpty: false)\r\n  |> timeShift(duration: duration(v: uint(v: current_startTime[0])-uint(v: baseline_startTime[0])))\r\n\r\nunion(tables: [current_data_rt, baseline_data_rt])",
          "refId": "A"
        }
      ],
      "title": "median response time | ${sampleType}",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDBJMETER-OLD}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "ms"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "responseTime Baseline test"
            },
            "properties": [
              {
                "id": "custom.lineStyle",
                "value": {
                  "dash": [
                    10,
                    10
                  ],
                  "fill": "dash"
                }
              },
              {
                "id": "displayName",
                "value": "${__field.labels.runId}"
              },
              {
                "id": "custom.gradientMode",
                "value": "opacity"
              },
              {
                "id": "color",
                "value": {
                  "mode": "continuous-BlPu"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "responseTime Current test"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "${__field.labels.runId}"
              },
              {
                "id": "color",
                "value": {
                  "mode": "continuous-GrYlRd"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 10,
        "w": 12,
        "x": 12,
        "y": 11
      },
      "id": 131,
      "options": {
        "legend": {
          "calcs": [
            "mean"
          ],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDBJMETER-OLD}"
          },
          "query": "current_data = from(bucket: v.bucket)\r\n  |> range(start: 0, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"requestsRaw\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"responseTime\")\r\n  |> filter(fn: (r) => r[\"sampleType\"] == \"${sampleType}\")\r\n  |> filter(fn: (r) => r[\"runId\"] == \"${current_runId}\")\r\n  |> set(key: \"runId\",value: \"Current test\")\r\n\r\ncurrent_endTime = current_data \r\n  |> keep(columns: [\"_time\", \"runId\"])\r\n  |> max(column: \"_time\")\r\n  |> findColumn(fn: (key) => key.runId == \"Current test\", column: \"_time\")\r\n\r\ncurrent_startTime = current_data \r\n  |> keep(columns: [\"_time\", \"runId\"])\r\n  |> min(column: \"_time\")\r\n  |> findColumn(fn: (key) => key.runId == \"Current test\", column: \"_time\")\r\n\r\ncurrent_data_rt = current_data\r\n  |> range(start: time(v: current_startTime[0]), stop: time(v: current_endTime[0]))\r\n  |> keep(columns: [\"_time\", \"_value\", \"_field\", \"runId\"])\r\n  |> toFloat()\r\n  |> aggregateWindow(\r\n    every: ${aggregation}s, \r\n    fn: (tables=<-, column) =>\r\n      tables\r\n        |> quantile(q: 0.90, method: \"exact_selector\"),\r\n    createEmpty: false)\r\n\r\nbaseline_data = from(bucket: v.bucket)\r\n  |> range(start: 0, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"requestsRaw\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"responseTime\")\r\n  |> filter(fn: (r) => r[\"sampleType\"] == \"${sampleType}\")\r\n  |> filter(fn: (r) => r[\"runId\"] == \"${baseline_runId}\")\r\n  |> set(key: \"runId\",value: \"Baseline test\")\r\n\r\nbaseline_endTime = baseline_data \r\n  |> keep(columns: [\"_time\", \"runId\"])\r\n  |> max(column: \"_time\")\r\n  |> findColumn(fn: (key) => key.runId == \"Baseline test\", column: \"_time\")\r\n\r\nbaseline_startTime = baseline_data \r\n  |> keep(columns: [\"_time\", \"runId\"])\r\n  |> min(column: \"_time\")\r\n  |> findColumn(fn: (key) => key.runId == \"Baseline test\", column: \"_time\")\r\n\r\nbaseline_data_rt = baseline_data\r\n  |> range(start: time(v: baseline_startTime[0]), stop: time(v: baseline_endTime[0]))\r\n  |> keep(columns: [\"_time\", \"_value\", \"_field\", \"runId\"])\r\n  |> toFloat()\r\n  |> aggregateWindow(\r\n    every: ${aggregation}s, \r\n    fn: (tables=<-, column) =>\r\n      tables\r\n        |> quantile(q: 0.90, method: \"exact_selector\"),\r\n    createEmpty: false)\r\n  |> timeShift(duration: duration(v: uint(v: current_startTime[0])-uint(v: baseline_startTime[0])))\r\n\r\nunion(tables: [current_data_rt, baseline_data_rt])",
          "refId": "A"
        }
      ],
      "title": "90%-tile | ${sampleType}",
      "type": "timeseries"
    },
    {
      "collapsed": false,
      "datasource": {
        "uid": "InfluxDB"
      },
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 21
      },
      "id": 85,
      "panels": [],
      "title": "Aggregate Report (ms)",
      "type": "row"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDBJMETER-OLD}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "center",
            "cellOptions": {
              "type": "auto"
            },
            "inspect": false
          },
          "decimals": 2,
          "displayName": "",
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "ms"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "4. Diff,%"
            },
            "properties": [
              {
                "id": "unit",
                "value": "percentunit"
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "semi-dark-green",
                      "value": null
                    },
                    {
                      "color": "orange",
                      "value": 0.25
                    },
                    {
                      "color": "red",
                      "value": 0.5
                    }
                  ]
                }
              },
              {
                "id": "custom.cellOptions",
                "value": {
                  "type": "color-text"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "5. Diff,ms"
            },
            "properties": [
              {
                "id": "unit",
                "value": "ms"
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "semi-dark-green",
                      "value": null
                    },
                    {
                      "color": "#EAB839",
                      "value": 300
                    },
                    {
                      "color": "red",
                      "value": 500
                    }
                  ]
                }
              },
              {
                "id": "custom.cellOptions",
                "value": {
                  "type": "color-text"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "1. Transaction"
            },
            "properties": [
              {
                "id": "custom.align",
                "value": "left"
              },
              {
                "id": "custom.width",
                "value": 300
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "3. Current"
            },
            "properties": [
              {
                "id": "custom.cellOptions",
                "value": {
                  "type": "color-text"
                }
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "orange",
                      "value": 2000
                    },
                    {
                      "color": "red",
                      "value": 5000
                    }
                  ]
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "2. Baseline"
            },
            "properties": [
              {
                "id": "custom.cellOptions",
                "value": {
                  "type": "color-text"
                }
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "orange",
                      "value": 2000
                    },
                    {
                      "color": "red",
                      "value": 5000
                    }
                  ]
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 26,
        "w": 12,
        "x": 0,
        "y": 22
      },
      "id": 83,
      "links": [],
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": [
          {
            "desc": false,
            "displayName": "1. Transaction"
          }
        ]
      },
      "pluginVersion": "10.0.2",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDBJMETER-OLD}"
          },
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "orderByTime": "ASC",
          "policy": "default",
          "query": "current_test = from(bucket: v.bucket)\r\n  |> range(start: 0, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"requestsRaw\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"responseTime\")\r\n  |> filter(fn: (r) => r[\"sampleType\"] == \"${sampleType}\")\r\n  |> filter(fn: (r) => r[\"runId\"] == \"${current_runId}\")\r\n  |> keep(columns: [\"_value\", \"requestName\"])\r\n  |> group(columns: [\"requestName\"])\r\n  |> rename(columns: {\"requestName\": \"1. Transaction\"})\r\n  |> toFloat()\r\n  |> quantile(q: 0.50)\r\n  |> rename(columns: {\"_value\": \"Current\"})\r\n  |> keep(columns: [\"Current\", \"1. Transaction\"])\r\n\r\n\r\nbaseline_test = from(bucket: v.bucket)\r\n  |> range(start: 0, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"requestsRaw\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"responseTime\")\r\n  |> filter(fn: (r) => r[\"sampleType\"] == \"${sampleType}\")\r\n  |> filter(fn: (r) => r[\"runId\"] == \"${baseline_runId}\")\r\n  |> keep(columns: [\"_value\", \"requestName\"])\r\n  |> group(columns: [\"requestName\"])\r\n  |> rename(columns: {\"requestName\": \"1. Transaction\"})\r\n  |> toFloat()\r\n  |> quantile(q: 0.50)\r\n  |> rename(columns: {\"_value\": \"Baseline\"})\r\n  |> keep(columns: [\"Baseline\", \"1. Transaction\"])\r\n\r\njoin(tables: {d1: current_test, d2: baseline_test}, on: [\"1. Transaction\"])\r\n  |> map(fn: (r) => ({ r with \"Diff,ms\": float(v: r.Current)-float(v: r.Baseline)  }))\r\n  |> map(fn: (r) => ({ r with \"Diff,%\": float(v: r.Current)/float(v: r.Baseline)-float(v: 1)  }))\r\n  |> rename(columns: {\"Baseline\": \"2. Baseline\"})\r\n  |> rename(columns: {\"Current\": \"3. Current\"})\r\n  |> rename(columns: {\"Diff,%\": \"4. Diff,%\"})\r\n  |> rename(columns: {\"Diff,ms\": \"5. Diff,ms\"})\r\n  |> group(columns: [\"transaction\"])",
          "refId": "4",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              }
            ]
          ],
          "tags": []
        }
      ],
      "title": "Median ${sampleType}s response time",
      "transformations": [
        {
          "id": "merge",
          "options": {
            "reducers": []
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "${DS_INFLUXDBJMETER-OLD}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "center",
            "cellOptions": {
              "type": "auto"
            },
            "inspect": false
          },
          "decimals": 2,
          "displayName": "",
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "ms"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "4. Diff,%"
            },
            "properties": [
              {
                "id": "unit",
                "value": "percentunit"
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "semi-dark-green",
                      "value": null
                    },
                    {
                      "color": "orange",
                      "value": 0.25
                    },
                    {
                      "color": "red",
                      "value": 0.5
                    }
                  ]
                }
              },
              {
                "id": "custom.cellOptions",
                "value": {
                  "type": "color-text"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "5. Diff,ms"
            },
            "properties": [
              {
                "id": "unit",
                "value": "ms"
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "semi-dark-green",
                      "value": null
                    },
                    {
                      "color": "#EAB839",
                      "value": 300
                    },
                    {
                      "color": "red",
                      "value": 500
                    }
                  ]
                }
              },
              {
                "id": "custom.cellOptions",
                "value": {
                  "type": "color-text"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "1. Transaction"
            },
            "properties": [
              {
                "id": "custom.align",
                "value": "left"
              },
              {
                "id": "custom.width",
                "value": 300
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 26,
        "w": 12,
        "x": 12,
        "y": 22
      },
      "id": 123,
      "links": [],
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": [
          {
            "desc": false,
            "displayName": "1. Transaction"
          }
        ]
      },
      "pluginVersion": "10.0.2",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDBJMETER-OLD}"
          },
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "orderByTime": "ASC",
          "policy": "default",
          "query": "current_test = from(bucket: v.bucket)\r\n  |> range(start: 0, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"requestsRaw\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"responseTime\")\r\n  |> filter(fn: (r) => r[\"sampleType\"] == \"${sampleType}\")\r\n  |> filter(fn: (r) => r[\"runId\"] == \"${current_runId}\")\r\n  |> keep(columns: [\"_value\", \"requestName\"])\r\n  |> group(columns: [\"requestName\"])\r\n  |> rename(columns: {\"requestName\": \"1. Transaction\"})\r\n  |> toFloat()\r\n  |> quantile(q: 0.90)\r\n  |> rename(columns: {\"_value\": \"Current\"})\r\n  |> keep(columns: [\"Current\", \"1. Transaction\"])\r\n\r\n\r\nbaseline_test = from(bucket: v.bucket)\r\n  |> range(start: 0, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"requestsRaw\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"responseTime\")\r\n  |> filter(fn: (r) => r[\"sampleType\"] == \"${sampleType}\")\r\n  |> filter(fn: (r) => r[\"runId\"] == \"${baseline_runId}\")\r\n  |> keep(columns: [\"_value\", \"requestName\"])\r\n  |> group(columns: [\"requestName\"])\r\n  |> rename(columns: {\"requestName\": \"1. Transaction\"})\r\n  |> toFloat()\r\n  |> quantile(q: 0.90)\r\n  |> rename(columns: {\"_value\": \"Baseline\"})\r\n  |> keep(columns: [\"Baseline\", \"1. Transaction\"])\r\n\r\njoin(tables: {d1: current_test, d2: baseline_test}, on: [\"1. Transaction\"])\r\n  |> map(fn: (r) => ({ r with \"Diff,ms\": float(v: r.Current)-float(v: r.Baseline)  }))\r\n  |> map(fn: (r) => ({ r with \"Diff,%\": float(v: r.Current)/float(v: r.Baseline)-float(v: 1)  }))\r\n  |> rename(columns: {\"Baseline\": \"2. Baseline\"})\r\n  |> rename(columns: {\"Current\": \"3. Current\"})\r\n  |> rename(columns: {\"Diff,%\": \"4. Diff,%\"})\r\n  |> rename(columns: {\"Diff,ms\": \"5. Diff,ms\"})\r\n  |> group(columns: [\"transaction\"])",
          "refId": "4",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              }
            ]
          ],
          "tags": []
        }
      ],
      "title": "90%-tile ${sampleType}s response time",
      "transformations": [
        {
          "id": "merge",
          "options": {
            "reducers": []
          }
        }
      ],
      "type": "table"
    },
    {
      "collapsed": true,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 48
      },
      "id": 135,
      "panels": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDBJMETER-OLD}"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 10,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 2,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "bytes"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "responseTime Baseline test"
                },
                "properties": [
                  {
                    "id": "custom.lineStyle",
                    "value": {
                      "dash": [
                        10,
                        10
                      ],
                      "fill": "dash"
                    }
                  },
                  {
                    "id": "displayName",
                    "value": "${__field.labels.runId}"
                  },
                  {
                    "id": "custom.gradientMode",
                    "value": "opacity"
                  },
                  {
                    "id": "color",
                    "value": {
                      "mode": "continuous-BlPu"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "responseTime Current test"
                },
                "properties": [
                  {
                    "id": "displayName",
                    "value": "${__field.labels.runId}"
                  },
                  {
                    "id": "color",
                    "value": {
                      "mode": "continuous-GrYlRd"
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 49
          },
          "id": 137,
          "options": {
            "legend": {
              "calcs": [
                "mean"
              ],
              "displayMode": "list",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "${DS_INFLUXDBJMETER-OLD}"
              },
              "query": "current_data = from(bucket: v.bucket)\r\n  |> range(start: 0, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"requestsRaw\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"sentBytes\")\r\n  |> filter(fn: (r) => r[\"sampleType\"] == \"${sampleType}\")\r\n  |> filter(fn: (r) => r[\"runId\"] == \"${current_runId}\")\r\n  |> set(key: \"runId\",value: \"Current test\")\r\n\r\ncurrent_endTime = current_data \r\n  |> keep(columns: [\"_time\", \"runId\"])\r\n  |> max(column: \"_time\")\r\n  |> findColumn(fn: (key) => key.runId == \"Current test\", column: \"_time\")\r\n\r\ncurrent_startTime = current_data \r\n  |> keep(columns: [\"_time\", \"runId\"])\r\n  |> min(column: \"_time\")\r\n  |> findColumn(fn: (key) => key.runId == \"Current test\", column: \"_time\")\r\n\r\ncurrent_data_rt = current_data\r\n  |> range(start: time(v: current_startTime[0]), stop: time(v: current_endTime[0]))\r\n  |> keep(columns: [\"_time\", \"_value\", \"_field\", \"runId\"])\r\n  |> toFloat()\r\n  |> aggregateWindow(every: ${aggregation}s, fn: median, createEmpty: false)\r\n\r\nbaseline_data = from(bucket: v.bucket)\r\n  |> range(start: 0, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"requestsRaw\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"sentBytes\")\r\n  |> filter(fn: (r) => r[\"sampleType\"] == \"${sampleType}\")\r\n  |> filter(fn: (r) => r[\"runId\"] == \"${baseline_runId}\")\r\n  |> set(key: \"runId\",value: \"Baseline test\")\r\n\r\nbaseline_endTime = baseline_data \r\n  |> keep(columns: [\"_time\", \"runId\"])\r\n  |> max(column: \"_time\")\r\n  |> findColumn(fn: (key) => key.runId == \"Baseline test\", column: \"_time\")\r\n\r\nbaseline_startTime = baseline_data \r\n  |> keep(columns: [\"_time\", \"runId\"])\r\n  |> min(column: \"_time\")\r\n  |> findColumn(fn: (key) => key.runId == \"Baseline test\", column: \"_time\")\r\n\r\nbaseline_data_rt = baseline_data\r\n  |> range(start: time(v: baseline_startTime[0]), stop: time(v: baseline_endTime[0]))\r\n  |> keep(columns: [\"_time\", \"_value\", \"_field\", \"runId\"])\r\n  |> toFloat()\r\n  |> aggregateWindow(every: ${aggregation}s, fn: median, createEmpty: false)\r\n  |> timeShift(duration: duration(v: uint(v: current_startTime[0])-uint(v: baseline_startTime[0])))\r\n\r\nunion(tables: [current_data_rt, baseline_data_rt])",
              "refId": "A"
            }
          ],
          "title": "Bytes sent | ${sampleType}",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDBJMETER-OLD}"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 10,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 2,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "bytes"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "responseTime Baseline test"
                },
                "properties": [
                  {
                    "id": "custom.lineStyle",
                    "value": {
                      "dash": [
                        10,
                        10
                      ],
                      "fill": "dash"
                    }
                  },
                  {
                    "id": "displayName",
                    "value": "${__field.labels.runId}"
                  },
                  {
                    "id": "custom.gradientMode",
                    "value": "opacity"
                  },
                  {
                    "id": "color",
                    "value": {
                      "mode": "continuous-BlPu"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "responseTime Current test"
                },
                "properties": [
                  {
                    "id": "displayName",
                    "value": "${__field.labels.runId}"
                  },
                  {
                    "id": "color",
                    "value": {
                      "mode": "continuous-GrYlRd"
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 49
          },
          "id": 136,
          "options": {
            "legend": {
              "calcs": [
                "mean"
              ],
              "displayMode": "list",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "${DS_INFLUXDBJMETER-OLD}"
              },
              "query": "current_data = from(bucket: v.bucket)\r\n  |> range(start: 0, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"requestsRaw\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"receivedBytes\")\r\n  |> filter(fn: (r) => r[\"sampleType\"] == \"${sampleType}\")\r\n  |> filter(fn: (r) => r[\"runId\"] == \"${current_runId}\")\r\n  |> set(key: \"runId\",value: \"Current test\")\r\n\r\ncurrent_endTime = current_data \r\n  |> keep(columns: [\"_time\", \"runId\"])\r\n  |> max(column: \"_time\")\r\n  |> findColumn(fn: (key) => key.runId == \"Current test\", column: \"_time\")\r\n\r\ncurrent_startTime = current_data \r\n  |> keep(columns: [\"_time\", \"runId\"])\r\n  |> min(column: \"_time\")\r\n  |> findColumn(fn: (key) => key.runId == \"Current test\", column: \"_time\")\r\n\r\ncurrent_data_rt = current_data\r\n  |> range(start: time(v: current_startTime[0]), stop: time(v: current_endTime[0]))\r\n  |> keep(columns: [\"_time\", \"_value\", \"_field\", \"runId\"])\r\n  |> toFloat()\r\n  |> aggregateWindow(every: ${aggregation}s, fn: median, createEmpty: false)\r\n\r\nbaseline_data = from(bucket: v.bucket)\r\n  |> range(start: 0, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"requestsRaw\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"receivedBytes\")\r\n  |> filter(fn: (r) => r[\"sampleType\"] == \"${sampleType}\")\r\n  |> filter(fn: (r) => r[\"runId\"] == \"${baseline_runId}\")\r\n  |> set(key: \"runId\",value: \"Baseline test\")\r\n\r\nbaseline_endTime = baseline_data \r\n  |> keep(columns: [\"_time\", \"runId\"])\r\n  |> max(column: \"_time\")\r\n  |> findColumn(fn: (key) => key.runId == \"Baseline test\", column: \"_time\")\r\n\r\nbaseline_startTime = baseline_data \r\n  |> keep(columns: [\"_time\", \"runId\"])\r\n  |> min(column: \"_time\")\r\n  |> findColumn(fn: (key) => key.runId == \"Baseline test\", column: \"_time\")\r\n\r\nbaseline_data_rt = baseline_data\r\n  |> range(start: time(v: baseline_startTime[0]), stop: time(v: baseline_endTime[0]))\r\n  |> keep(columns: [\"_time\", \"_value\", \"_field\", \"runId\"])\r\n  |> toFloat()\r\n  |> aggregateWindow(every: ${aggregation}s, fn: median, createEmpty: false)\r\n  |> timeShift(duration: duration(v: uint(v: current_startTime[0])-uint(v: baseline_startTime[0])))\r\n\r\nunion(tables: [current_data_rt, baseline_data_rt])",
              "refId": "A"
            }
          ],
          "title": "Bytes received | ${sampleType}",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDBJMETER-OLD}"
          },
          "description": "",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "custom": {
                "align": "center",
                "cellOptions": {
                  "type": "auto"
                },
                "inspect": false
              },
              "decimals": 2,
              "displayName": "",
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  }
                ]
              },
              "unit": "bytes"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "4. Diff,%"
                },
                "properties": [
                  {
                    "id": "unit",
                    "value": "percentunit"
                  },
                  {
                    "id": "thresholds",
                    "value": {
                      "mode": "absolute",
                      "steps": [
                        {
                          "color": "semi-dark-green"
                        },
                        {
                          "color": "orange",
                          "value": 0.25
                        },
                        {
                          "color": "red",
                          "value": 0.5
                        }
                      ]
                    }
                  },
                  {
                    "id": "custom.cellOptions",
                    "value": {
                      "type": "color-text"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "5. Diff,ms"
                },
                "properties": [
                  {
                    "id": "unit",
                    "value": "bytes"
                  },
                  {
                    "id": "thresholds",
                    "value": {
                      "mode": "absolute",
                      "steps": [
                        {
                          "color": "semi-dark-green"
                        },
                        {
                          "color": "#EAB839",
                          "value": 50000
                        },
                        {
                          "color": "red",
                          "value": 100000
                        }
                      ]
                    }
                  },
                  {
                    "id": "custom.cellOptions",
                    "value": {
                      "type": "color-text"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "1. Transaction"
                },
                "properties": [
                  {
                    "id": "custom.align",
                    "value": "left"
                  },
                  {
                    "id": "custom.width",
                    "value": 300
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "3. Current"
                },
                "properties": [
                  {
                    "id": "custom.cellOptions",
                    "value": {
                      "type": "color-text"
                    }
                  },
                  {
                    "id": "thresholds",
                    "value": {
                      "mode": "absolute",
                      "steps": [
                        {
                          "color": "green"
                        },
                        {
                          "color": "orange",
                          "value": 500000
                        },
                        {
                          "color": "red",
                          "value": 1000000
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "2. Baseline"
                },
                "properties": [
                  {
                    "id": "custom.cellOptions",
                    "value": {
                      "type": "color-text"
                    }
                  },
                  {
                    "id": "thresholds",
                    "value": {
                      "mode": "absolute",
                      "steps": [
                        {
                          "color": "green"
                        },
                        {
                          "color": "orange",
                          "value": 500000
                        },
                        {
                          "color": "red",
                          "value": 1000000
                        }
                      ]
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 21,
            "w": 12,
            "x": 0,
            "y": 57
          },
          "id": 138,
          "links": [],
          "options": {
            "cellHeight": "sm",
            "footer": {
              "countRows": false,
              "fields": "",
              "reducer": [
                "sum"
              ],
              "show": false
            },
            "showHeader": true,
            "sortBy": [
              {
                "desc": false,
                "displayName": "1. Transaction"
              }
            ]
          },
          "pluginVersion": "10.0.2",
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "${DS_INFLUXDBJMETER-OLD}"
              },
              "groupBy": [
                {
                  "params": [
                    "$__interval"
                  ],
                  "type": "time"
                },
                {
                  "params": [
                    "null"
                  ],
                  "type": "fill"
                }
              ],
              "orderByTime": "ASC",
              "policy": "default",
              "query": "current_test = from(bucket: v.bucket)\r\n  |> range(start: 0, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"requestsRaw\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"sentBytes\")\r\n  |> filter(fn: (r) => r[\"sampleType\"] == \"${sampleType}\")\r\n  |> filter(fn: (r) => r[\"runId\"] == \"${current_runId}\")\r\n  |> keep(columns: [\"_value\", \"requestName\"])\r\n  |> group(columns: [\"requestName\"])\r\n  |> rename(columns: {\"requestName\": \"1. Transaction\"})\r\n  |> toFloat()\r\n  |> quantile(q: 0.50)\r\n  |> rename(columns: {\"_value\": \"Current\"})\r\n  |> keep(columns: [\"Current\", \"1. Transaction\"])\r\n\r\n\r\nbaseline_test = from(bucket: v.bucket)\r\n  |> range(start: 0, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"requestsRaw\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"sentBytes\")\r\n  |> filter(fn: (r) => r[\"sampleType\"] == \"${sampleType}\")\r\n  |> filter(fn: (r) => r[\"runId\"] == \"${baseline_runId}\")\r\n  |> keep(columns: [\"_value\", \"requestName\"])\r\n  |> group(columns: [\"requestName\"])\r\n  |> rename(columns: {\"requestName\": \"1. Transaction\"})\r\n  |> toFloat()\r\n  |> quantile(q: 0.50)\r\n  |> rename(columns: {\"_value\": \"Baseline\"})\r\n  |> keep(columns: [\"Baseline\", \"1. Transaction\"])\r\n\r\njoin(tables: {d1: current_test, d2: baseline_test}, on: [\"1. Transaction\"])\r\n  |> map(fn: (r) => ({ r with \"Diff,ms\": float(v: r.Current)-float(v: r.Baseline)  }))\r\n  |> map(fn: (r) => ({ r with \"Diff,%\": float(v: r.Current)/float(v: r.Baseline)-float(v: 1)  }))\r\n  |> rename(columns: {\"Baseline\": \"2. Baseline\"})\r\n  |> rename(columns: {\"Current\": \"3. Current\"})\r\n  |> rename(columns: {\"Diff,%\": \"4. Diff,%\"})\r\n  |> rename(columns: {\"Diff,ms\": \"5. Diff,ms\"})\r\n  |> group(columns: [\"transaction\"])",
              "refId": "4",
              "resultFormat": "time_series",
              "select": [
                [
                  {
                    "params": [
                      "value"
                    ],
                    "type": "field"
                  },
                  {
                    "params": [],
                    "type": "mean"
                  }
                ]
              ],
              "tags": []
            }
          ],
          "title": "Bytes sent ${sampleType}s",
          "transformations": [
            {
              "id": "merge",
              "options": {
                "reducers": []
              }
            }
          ],
          "type": "table"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "${DS_INFLUXDBJMETER-OLD}"
          },
          "description": "",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "custom": {
                "align": "center",
                "cellOptions": {
                  "type": "auto"
                },
                "inspect": false
              },
              "decimals": 2,
              "displayName": "",
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  }
                ]
              },
              "unit": "bytes"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "4. Diff,%"
                },
                "properties": [
                  {
                    "id": "unit",
                    "value": "percentunit"
                  },
                  {
                    "id": "thresholds",
                    "value": {
                      "mode": "absolute",
                      "steps": [
                        {
                          "color": "semi-dark-green"
                        },
                        {
                          "color": "orange",
                          "value": 0.25
                        },
                        {
                          "color": "red",
                          "value": 0.5
                        }
                      ]
                    }
                  },
                  {
                    "id": "custom.cellOptions",
                    "value": {
                      "type": "color-text"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "5. Diff,ms"
                },
                "properties": [
                  {
                    "id": "unit",
                    "value": "bytes"
                  },
                  {
                    "id": "thresholds",
                    "value": {
                      "mode": "absolute",
                      "steps": [
                        {
                          "color": "semi-dark-green"
                        },
                        {
                          "color": "#EAB839",
                          "value": 50000
                        },
                        {
                          "color": "red",
                          "value": 100000
                        }
                      ]
                    }
                  },
                  {
                    "id": "custom.cellOptions",
                    "value": {
                      "type": "color-text"
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "1. Transaction"
                },
                "properties": [
                  {
                    "id": "custom.align",
                    "value": "left"
                  },
                  {
                    "id": "custom.width",
                    "value": 300
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "3. Current"
                },
                "properties": [
                  {
                    "id": "custom.cellOptions",
                    "value": {
                      "type": "color-text"
                    }
                  },
                  {
                    "id": "thresholds",
                    "value": {
                      "mode": "absolute",
                      "steps": [
                        {
                          "color": "green"
                        },
                        {
                          "color": "orange",
                          "value": 500000
                        },
                        {
                          "color": "red",
                          "value": 1000000
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "2. Baseline"
                },
                "properties": [
                  {
                    "id": "custom.cellOptions",
                    "value": {
                      "type": "color-text"
                    }
                  },
                  {
                    "id": "thresholds",
                    "value": {
                      "mode": "absolute",
                      "steps": [
                        {
                          "color": "green"
                        },
                        {
                          "color": "orange",
                          "value": 500000
                        },
                        {
                          "color": "red",
                          "value": 1000000
                        }
                      ]
                    }
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 21,
            "w": 12,
            "x": 12,
            "y": 57
          },
          "id": 139,
          "links": [],
          "options": {
            "cellHeight": "sm",
            "footer": {
              "countRows": false,
              "fields": "",
              "reducer": [
                "sum"
              ],
              "show": false
            },
            "showHeader": true,
            "sortBy": [
              {
                "desc": false,
                "displayName": "1. Transaction"
              }
            ]
          },
          "pluginVersion": "10.0.2",
          "targets": [
            {
              "datasource": {
                "type": "influxdb",
                "uid": "${DS_INFLUXDBJMETER-OLD}"
              },
              "groupBy": [
                {
                  "params": [
                    "$__interval"
                  ],
                  "type": "time"
                },
                {
                  "params": [
                    "null"
                  ],
                  "type": "fill"
                }
              ],
              "orderByTime": "ASC",
              "policy": "default",
              "query": "current_test = from(bucket: v.bucket)\r\n  |> range(start: 0, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"requestsRaw\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"receivedBytes\")\r\n  |> filter(fn: (r) => r[\"sampleType\"] == \"${sampleType}\")\r\n  |> filter(fn: (r) => r[\"runId\"] == \"${current_runId}\")\r\n  |> keep(columns: [\"_value\", \"requestName\"])\r\n  |> group(columns: [\"requestName\"])\r\n  |> rename(columns: {\"requestName\": \"1. Transaction\"})\r\n  |> toFloat()\r\n  |> quantile(q: 0.50)\r\n  |> rename(columns: {\"_value\": \"Current\"})\r\n  |> keep(columns: [\"Current\", \"1. Transaction\"])\r\n\r\n\r\nbaseline_test = from(bucket: v.bucket)\r\n  |> range(start: 0, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"requestsRaw\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"receivedBytes\")\r\n  |> filter(fn: (r) => r[\"sampleType\"] == \"${sampleType}\")\r\n  |> filter(fn: (r) => r[\"runId\"] == \"${baseline_runId}\")\r\n  |> keep(columns: [\"_value\", \"requestName\"])\r\n  |> group(columns: [\"requestName\"])\r\n  |> rename(columns: {\"requestName\": \"1. Transaction\"})\r\n  |> toFloat()\r\n  |> quantile(q: 0.50)\r\n  |> rename(columns: {\"_value\": \"Baseline\"})\r\n  |> keep(columns: [\"Baseline\", \"1. Transaction\"])\r\n\r\njoin(tables: {d1: current_test, d2: baseline_test}, on: [\"1. Transaction\"])\r\n  |> map(fn: (r) => ({ r with \"Diff,ms\": float(v: r.Current)-float(v: r.Baseline)  }))\r\n  |> map(fn: (r) => ({ r with \"Diff,%\": float(v: r.Current)/float(v: r.Baseline)-float(v: 1)  }))\r\n  |> rename(columns: {\"Baseline\": \"2. Baseline\"})\r\n  |> rename(columns: {\"Current\": \"3. Current\"})\r\n  |> rename(columns: {\"Diff,%\": \"4. Diff,%\"})\r\n  |> rename(columns: {\"Diff,ms\": \"5. Diff,ms\"})\r\n  |> group(columns: [\"transaction\"])",
              "refId": "4",
              "resultFormat": "time_series",
              "select": [
                [
                  {
                    "params": [
                      "value"
                    ],
                    "type": "field"
                  },
                  {
                    "params": [],
                    "type": "mean"
                  }
                ]
              ],
              "tags": []
            }
          ],
          "title": "Bytes received ${sampleType}s",
          "transformations": [
            {
              "id": "merge",
              "options": {
                "reducers": []
              }
            }
          ],
          "type": "table"
        }
      ],
      "title": "Bytes sent/received",
      "type": "row"
    }
  ],
  "refresh": "",
  "schemaVersion": 38,
  "style": "dark",
  "tags": [
    "comparison",
    "custom listener"
  ],
  "templating": {
    "list": [
      {
        "current": {},
        "datasource": {
          "type": "influxdb",
          "uid": "${DS_INFLUXDBJMETER-OLD}"
        },
        "definition": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(\n  bucket: v.bucket, \n  tag: \"testName\",\n  start: -1000d\n)",
        "hide": 0,
        "includeAll": false,
        "label": "testName",
        "multi": false,
        "name": "testName",
        "options": [],
        "query": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(\n  bucket: v.bucket, \n  tag: \"testName\",\n  start: -1000d\n)",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {},
        "datasource": {
          "type": "influxdb",
          "uid": "${DS_INFLUXDBJMETER-OLD}"
        },
        "definition": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(\n    bucket: v.bucket,\n    tag: \"runId\",\n    predicate: (r) => r._measurement == \"tests\" and r[\"testName\"] == \"${testName}\" and r[\"status\"] == \"Baseline\",\n    start: -1000d\n  )",
        "hide": 0,
        "includeAll": false,
        "label": "",
        "multi": false,
        "name": "baseline_runId",
        "options": [],
        "query": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(\n    bucket: v.bucket,\n    tag: \"runId\",\n    predicate: (r) => r._measurement == \"tests\" and r[\"testName\"] == \"${testName}\" and r[\"status\"] == \"Baseline\",\n    start: -1000d\n  )",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 4,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "current": {},
        "datasource": {
          "type": "influxdb",
          "uid": "${DS_INFLUXDBJMETER-OLD}"
        },
        "definition": "import \"influxdata/influxdb/schema\"\r\n\r\nschema.tagValues(\r\n    bucket: v.bucket,\r\n    tag: \"runId\",\r\n    predicate: (r) => r._measurement == \"requestsRaw\" and r[\"testName\"] == \"${testName}\",\r\n    start: -1000d\r\n  )",
        "hide": 0,
        "includeAll": false,
        "label": "",
        "multi": false,
        "name": "current_runId",
        "options": [],
        "query": "import \"influxdata/influxdb/schema\"\r\n\r\nschema.tagValues(\r\n    bucket: v.bucket,\r\n    tag: \"runId\",\r\n    predicate: (r) => r._measurement == \"requestsRaw\" and r[\"testName\"] == \"${testName}\",\r\n    start: -1000d\r\n  )",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 4,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "current": {
          "selected": true,
          "text": "transaction",
          "value": "transaction"
        },
        "hide": 0,
        "includeAll": false,
        "label": "",
        "multi": false,
        "name": "sampleType",
        "options": [
          {
            "selected": false,
            "text": "request",
            "value": "request"
          },
          {
            "selected": true,
            "text": "transaction",
            "value": "transaction"
          }
        ],
        "query": "request,transaction",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "current": {
          "selected": true,
          "text": "60",
          "value": "60"
        },
        "hide": 0,
        "includeAll": false,
        "multi": false,
        "name": "aggregation",
        "options": [
          {
            "selected": false,
            "text": "5",
            "value": "5"
          },
          {
            "selected": true,
            "text": "60",
            "value": "60"
          },
          {
            "selected": false,
            "text": "300",
            "value": "300"
          },
          {
            "selected": false,
            "text": "600",
            "value": "600"
          }
        ],
        "query": "5,60,300,600",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      }
    ]
  },
  "time": {
    "from": "now-90d",
    "to": "now"
  },
  "timepicker": {
    "refresh_intervals": [
      "5s",
      "10s",
      "30s",
      "1m"
    ],
    "time_options": [
      "5m",
      "15m",
      "1h",
      "6h",
      "12h",
      "24h",
      "2d",
      "7d",
      "30d"
    ]
  },
  "timezone": "browser",
  "title": "JMeter tests comparison CUSTOM LISTENER",
  "uid": "jmeter-tests-comparison-custom-listener",
  "version": 2,
  "weekStart": ""
}